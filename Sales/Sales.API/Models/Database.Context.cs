//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sales.API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SalesEntities : DbContext
    {
        public SalesEntities()
            : base("name=SalesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Manufacturer> Manufacturers { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<SaleProduct> SaleProducts { get; set; }
        public virtual DbSet<vClientVIP> vClientVIPs { get; set; }
    
        public virtual int spAddProductStock(Nullable<int> productId, Nullable<int> quantity)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProductStock", productIdParameter, quantityParameter);
        }
    
        public virtual int spInsertSale(Nullable<int> clientId, Nullable<System.DateTime> dateSale, ObjectParameter saleId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var dateSaleParameter = dateSale.HasValue ?
                new ObjectParameter("DateSale", dateSale) :
                new ObjectParameter("DateSale", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertSale", clientIdParameter, dateSaleParameter, saleId);
        }
    
        public virtual int spInsertSaleProduct(Nullable<int> saleId, Nullable<int> productId, Nullable<int> quantity)
        {
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertSaleProduct", saleIdParameter, productIdParameter, quantityParameter);
        }
    
        public virtual int spRemoveProductStock(Nullable<int> productId, Nullable<int> quantity)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRemoveProductStock", productIdParameter, quantityParameter);
        }
    
        public virtual ObjectResult<spSelectSaleByClient_Result> spSelectSaleByClient(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectSaleByClient_Result>("spSelectSaleByClient", clientIdParameter);
        }
    
        public virtual ObjectResult<spSelectSaleByDate_Result> spSelectSaleByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectSaleByDate_Result>("spSelectSaleByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spSelectTopSellingProducts_Result> spSelectTopSellingProducts(Nullable<int> length)
        {
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectTopSellingProducts_Result>("spSelectTopSellingProducts", lengthParameter);
        }
    
        public virtual int spUpdateClientVIP(Nullable<int> clientId, Nullable<System.DateTime> dateSale)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var dateSaleParameter = dateSale.HasValue ?
                new ObjectParameter("DateSale", dateSale) :
                new ObjectParameter("DateSale", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateClientVIP", clientIdParameter, dateSaleParameter);
        }
    
        public virtual int spUpdateProductStock(Nullable<int> productId, Nullable<int> stock)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProductStock", productIdParameter, stockParameter);
        }
    }
}
